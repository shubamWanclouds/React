{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","rows","value","onChange","event","target","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","textValue","document","getElementById","select","navigator","clipboard","writeText","split","join","filter","element","length","Alert","alert","role","word","lower","charAt","slice","capitalise","msg","defaultProps","about","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a7c14f25.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <afterEach className=\"navbar-brand\" href=\"\">{props.title}</afterEach>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"/about\">{props.about}</a>\r\n              </li> */}\r\n            </ul>\r\n            <div className={`form-check form-switch text-${props.mode === 'dark'? 'light':'dark'}`}>\r\n              <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode}/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Darkmode</label>\r\n          </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set Title Here',\r\n    about: 'Set About Here'\r\n}\r\n\r\n\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    \r\n    const [text, setText] = useState(\"\");\r\n\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Uppercase!\",\"success\");\r\n    }\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to Lowercase!\",\"success\");\r\n    }\r\n    const handleClear = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Textbox cleared!\",\"success\");\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    const handleCopy = () => {\r\n        let textValue= document.getElementById(\"textArea\");\r\n        textValue.select();\r\n        navigator.clipboard.writeText(textValue.value);\r\n        props.showAlert(\"Message Copied to clipboard!\",\"success\");\r\n    }\r\n    const handleExtraSpaces = () => {\r\n       let newText= text.split(/[ ]+/);\r\n       setText(newText.join(\" \"));\r\n       props.showAlert(\"Extra spaces have been removed successfully!\",\"success\");\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <div className=\"container\" style={{color:props.mode === 'dark'? 'white': 'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n                <textarea className=\"form-control\" id=\"textArea\" rows=\"8\" value = {text} onChange ={handleOnChange}\r\n                style={{backgroundColor: props.mode === 'dark'? '#261C2C':'white', color: props.mode === 'dark'? 'white':'black'}}\r\n                ></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick = {handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick = {handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick = {handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick = {handleExtraSpaces}>Remove Extra Spaces</button>\r\n            <button className=\"btn btn-primary mx-1 my-1\" onClick = {handleClear}>Clear Text</button>\r\n        </div>\r\n\r\n        <div className=\"container my-3\" style={{color:props.mode === 'dark'? 'white': 'black'}}>\r\n            <h3>Your Text Summary</h3>\r\n            <p>{text.split(' ').filter(element=>element.length!=0).length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(' ').length} Minutes read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:'Enter some text in the box above to preview here'}</p>\r\n        </div>\r\n      </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    \r\n    const capitalise = (word) => {\r\n        const lower= word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalise(props.alert.type)}: </strong>{props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","import './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if(mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#261C2C';\n      showAlert(\"Dark Mode has been applied Successfully\", \"success\");\n      document.title = 'TextUtils -  Dark Mode';\n\n      //Blinking Title\n      // setInterval(() => {\n      //   document.title = 'Text Utils is Amazing';\n      // }, 1500);\n\n      // setInterval(() => {\n      //   document.title = 'Install Text Utils Now';\n      // }, 2000);\n\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode has been applied Successfully\", \"success\");\n      document.title = 'TextUtils -  Light Mode';\n    }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" about=\"About TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n            <TextForm heading=\"Enter the text to analyse\" mode={mode} showAlert={showAlert}/>\n          {/* </Route>\n        </Switch> */}\n      </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}